---
layout: base
---

%h1
  Spring Boot Starter <span class="label label-important">since 2.3.0</span>

%h2
  Getting Started

%p
  For Spring Boot 2.x support, add the Togglz Spring Boot Starter dependency to your project:

%pre(class="prettyprint lang-xml")
  :escaped
    <dependency>
      <groupId>org.togglz</groupId>
      <artifactId>togglz-spring-boot-starter</artifactId>
      <version>#{site.stableVersion}</version>
    </dependency>

%p
  Or when using Gradle simply:

%pre(class="prettyprint")
  :escaped
    compile("org.togglz:togglz-spring-boot-starter:#{site.stableVersion}")

%p
  <i>(Note, for Spring Boot 1.x support, replace <code>org.togglz:togglz-spring-boot-starter:#{site.stableVersion}</code> with 
  <code>org.togglz:togglz-legacy-spring-boot-starter:#{site.stableVersion}</code>.)</i>

%p
  The starter will not only add the <code>togglz-core</code> and <code>togglz-spring-core</code> modules to your project,
  it will also enable the auto configuration of the Togglz configration.

%p
  Optionally add the <code>togglz-console</code>, <code>togglz-spring-security</code> and <code>thymeleaf-extras-togglz</code> modules:

%pre(class="prettyprint lang-xml")
  :escaped
    <!-- Togglz Admin Console (optional) -->
    <dependency>
      <groupId>org.togglz</groupId>
      <artifactId>togglz-console</artifactId>
      <version>#{site.stableVersion}</version>
    </dependency>

    <!-- Togglz Spring Security (optional) -->
    <dependency>
      <groupId>org.togglz</groupId>
      <artifactId>togglz-spring-security</artifactId>
      <version>#{site.stableVersion}</version>
    </dependency>

    <!-- Thymeleaf Togglz Dialect (optional) -->
    <dependency>
      <groupId>com.github.heneke.thymeleaf</groupId>
      <artifactId>thymeleaf-extras-togglz</artifactId>
      <version>1.0.1.RELEASE</version>
    </dependency>

%p
  Or when using Gradle:

%pre(class="prettyprint")
  :escaped
    compile("org.togglz:togglz-console:#{site.stableVersion}")
    compile("org.togglz:togglz-spring-security:#{site.stableVersion}")
    compile("com.github.heneke.thymeleaf:thymeleaf-extras-togglz:1.0.1.RELEASE")

%h2
  Auto Configuration

%p
  The <code>togglz-spring-boot-starter</code> will automatically trigger the Togglz Spring Boot auto configuration.
  It will create all necessary beans and in particular the Togglz <code>FeatureManager</code>.
  You can inject the <code>FeatureManager</code> into your application code (using <a href="https://docs.spring.io/spring/docs/4.2.x/spring-framework-reference/html/beans.html#beans-constructor-injection" target="_blank">constructor injection</a>), and then use it to check if a feature is enabled, e.g.

%pre(class="prettyprint lang-java")
  :escaped
    @Controller
    public class MyClass {
      private FeatureManager manager;

      public MyClass(FeatureManager manager) {
          this.manager = manager;
      }

      @RequestMapping("/")
      public ResponseEntity<?> index() {
          if (manager.isActive(HELLO_WORLD)) {
               ...
          }
      }
    }

%p
  <i>(Note, that since Spring Framework 4.3, <a href="https://spring.io/blog/2016/03/04/core-container-refinements-in-spring-framework-4-3" target="_blank">implicit constructor injection is possible</a>, so you don't need to annotate your constructor explicitly with <code>@Autowired</code>.)</i>

%p
  The only thing that needs to be provided is configuration for the features you want to create. You can use Spring environment properties to create, enable and configure features. E.g. in <code>application.properties</code>:

%pre
  :escaped
    togglz.features.FOO.enabled=true
    togglz.features.BAR.enabled=false

%p
  or <code>application.yml</code>:

%pre
  :escaped
    togglz:
      features:
        FOO:
          enabled: true
        BAR:
          enabled: false

%p
  Features can also be grouped using <code>togglz.features.{FEATURE}.groups</code>, assigned an activation strategy by <code>togglz.features.{FEATURE}.strategy</code>, and the activation can be passed parameters using <code>togglz.features.{FEATURE}.param.*</code>.

%p
  Alternatively, or additionally, the <code>togglz.feature-enums</code> application property can be provided to create features from one or more enum classes.

  You can also provide features through an explicit <code>FeaturesProvider</code> e.g.:

%pre(class="prettyprint lang-java")
  :escaped
    public enum MyFeatures implements Feature {

        @EnabledByDefault
        @Label("First Feature")
        FEATURE_ONE,

        @Label("Second Feature")
        FEATURE_TWO;
    }

    @Bean
    public FeatureProvider featureProvider() {
        return new EnumBasedFeatureProvider(MyFeatures.class);
    }

%p
  By default the auto configuration will use a <code>NoOpUserProvider</code> and when Spring Security is used a <code>SpringSecurityUserProvider</code>.

%p
  If the <code>togglz-console</code> module is added then the <code>TogglzConsoleServlet</code> is registered using a <code>ServletRegistrationBean</code>.

%p
  Also any beans of type <code>ActivationStrategy</code> found in the application content will be added to the <code>FeatureManager</code> automatically.

%p
  If you define a <code>UserProvider</code>, <code>StateRepository</code>, <code>ActivationStrategyProvider</code> or even a <code>FeatureManager</code>
  manually the auto configuration will not create these beans and will use the ones already available in the application context.

%p
  The auto configuration supports providing feature state inside your application.properties/application.yml.
  See an example below of the application.yml. Note this is a Spring Boot in-memory implementation of a <code>StateRepository</code> which does not persist edited features.
  If persistence is needed a <code>FileBasedStateRepository</code>, <code>JDBCStateRepository</code> or any other applicable <code>StateRepository</code> must be added to the application context manually.
  When you want to use a <code>FileBasedStateRepository</code> you can also use this by providing a <code>togglz.features-file</code> application property.
  If the <code>togglz.features-file</code> is provided this will take precedence over features provided via application properties and effectively ignoring <code>togglz.features</code>.
  The <code>togglz.features-file</code> property is processed by <code>getResource()</code> so in most cases you should provide a
  file url for this property. To get a file in the local working directory you may use something like
  <code>togglz.features-file = file:./togglz.properties</code>.

%h2
  Admin Console Security

%p
  By default the Togglz admin console is secured using the <code>UserProvider</code> bean.
  Which <code>UserProvider</code> bean the auto configuration configures depends on the availability of the Spring Security dependency.
  If Spring Security is on the classpath a <code>SpringSecurityUserProvider</code> is configured.
  In this case it will check if the user has the authority as provided by the <code>togglz.console.feature-admin-authority</code> application property.
  If Spring Security is not on the classpath a <code>NoOpUserProvider</code> is configured which provides a <code>null</code> user to the admin console servlet.
  This also means the admin console will not be accessible. For quick testing the <code>togglz.console.secured</code> application property can be set to <code>false</code>.
  This will bypass security completely for the admin console. Be careful in production with this setting as it will give everybody access to the admin console.
  Setting <code>togglz.console.secured</code> to <code>false</code> is also useful when you want to protect the admin console independently from the <code>UserProvider</code>.

%p
  Note that by default the Admin Console runs on the management port (if configured).
  If the management port (<code>management.port</code>) is not configured it will run on the application port.
  Setting <code>togglz.console.use-management-port</code> to <code>false</code> will always run the Admin Console on the application port.

%h2
  Application Properties

%p
  The following properties can be specified inside your application.properties/application.yml file or as command line switches:

%pre(class="prettyprint lang-bsh")
  :escaped
    togglz:
      enabled: true # Enable Togglz for the application.
      feature-enums: # Comma-separated list of fully-qualified feature enum class names.
      feature-manager-name: # The name of the feature manager.
      features: # The feature states. Only needed if feature states are stored in application properties.
        HELLO_WORLD:
          enabled: true
        REVERSE_GREETING:
          enabled: true
          strategy: username
          param:
            users: user2, user3
      features-file: # The path to the features file that contains the feature states. Only needed if feature states are stored in external properties file.
      features-file-min-check-interval: # The minimum amount of time in milliseconds to wait between checks of the file's modification date.
      cache:
        enabled: false # Enable feature state caching.
        time-to-live: 0 # The time after which a cache entry will expire.
        time-unit: milliseconds # The time unit as java.util.concurrent.TimeUnit enum name (one of "nanoseconds", "microseconds", "milliseconds", "seconds", "minutes", "hours", "days").
      console:
        enabled: true # Enable admin console.
        path: /togglz-console # The path of the admin console when enabled.
        feature-admin-authority: ROLE_ADMIN # The name of the authority that is allowed to access the admin console.
        secured: true # Indicates if the admin console runs in secured mode. If false the application itself should take care of securing the admin console.
        use-management-port: true # Indicates if the admin console runs on the management port. If no management port is configured it will run on the application port. If set to true the console path will also be prefixed with the management.context-path.
      endpoint: # Only for Spring Boot 1.x (for Spring Boot 2.x see https://docs.spring.io/spring-boot/docs/current/reference/html/production-ready-endpoints.html)
        id: togglz # The endpoint identifier.
        enabled: true # Enable actuator endpoint.
        sensitive: true # Indicates if the endpoint exposes sensitive information.
