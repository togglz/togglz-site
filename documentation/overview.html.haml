---
layout: base
---

%h1
  Overview

%h2
  About Feature Flags

:markdown
  Togglz is an implementation of the [Feature Toggles](http://martinfowler.com/bliki/FeatureToggle.html) pattern for Java. 
  Feature Toggles are very useful especially in the context of agile development practices and are used by big sites 
  like [Flickr](http://code.flickr.com/blog/2009/12/02/flipping-out/).

:markdown
  [Martin Fowler](http://martinfowler.com/) defines Feature Toggles like this:

%blockquote
  %p
    The basic idea is to have a configuration file that defines a bunch of toggles for various features you have pending. The 
    running application then uses these toggles in order to decide whether or not to show the new feature.

%p
  So the basic idea is to define a toggle for each new feature you implement. As this toggle is disabled by 
  default you can safely deploy the application to the production servers even if the feature is not completely 
  finished and tested. If the feature implementation is complete you can enable it in the production system at 
  any point in time.

%p
  This concepts brings many advantages:

%ul
  %li
    You are able to deploy the application at any time. Even if not all features are completely implemented. Just disable 
    the features that shouldn't be visible for the users.
  %li
    The deployment of a new version of your application doesn't mean all the changes are effective. 
    You can do a <b>Dark Launch</b>, which means that you first deploy the new version and activate features at a later point in time.
  %li
    You can test a new feature in production by activating it only for a small group of beta testers. 
    This is also known as <b>Dark Testing</b>.
  %li
    If you find a serious bug in a new feature, you can immediately disable it until you are able to deploy a bugfix.

%h2
  About Togglz

%p  
  Togglz has been developed for providing simple to use feature flags for Java applications. 

%p
  The following table contains definitions for some basic terms. It is very important to understand these because
  they will be used in the following sections. 

%table.table-striped.definition
  %thead
    %tr
      %th Term
      %th Description
  %tbody
    %tr
      %td.left feature
      %td
        A feature represents a single characteristic that you can enable or disable. Features in Togglz are typically 
        represented by a Java enum with one value for each feature.
    %tr
      %td.left enabled / disabled
      %td
        An feature is either enabled or disabled for the entire application. 
    %tr
      %td.left active / inactive
      %td
        Active feature are visible and usable by the users, inactive features are hidden and therefore 
        not usable.
%p
  Features are simply declared using a standard Java enum type. Annotations can be used to enrich the feature 
  with additional metadata.

%pre(class="prettyprint lang-java")
  :escaped
    public enum MyFeatures implements Feature {
    
        @Label("First Feature")
        FEATURE_ONE,
        
        @Label("Second Feature")
        @ActiveByDefault
        FEATURE_TWO;
        
        public boolean isActive() {
            return FeatureContext.getFeatureManager().isActive(this);
        }
        
    }

%p
  The Togglz API has been developed in a way that makes it very easy to check whether a feature is active 
  or not. Just call the <code>isActive()</code> method on the corresponding feature enum value. 
  
%pre(class="prettyprint lang-java")
  :escaped
    public void someBusinessMethod() {
    
      if( MyFeatures.FEATURE_ONE.isActive() ) {
        // do new exciting stuff here
      }
      
    }

%h2
  The feature state

%p
  The state of a feature in Togglz consists of the following properties:
  
%ul
  %li
    This <b>enabled</b> flag specifies whether a feature is currently turned on (enabled) or off (disabled).
  %li
    An optional <b>activation strategy</b> allows you to specify in which situations an enabled feature 
    is active. You can for example restrict a feature to a certain list of users or to a 
    specific time frame. Have a look at the <a href="activation-strategies.html">Activation Strategies</a> 
    chapter to learn more about activation strategies.
  %li
    An optional list of <b>strategy parameters</b> are used to configure the activation strategy.

%p
  The values of these properties can be used to determine whether a feature is active or not:

%ul
  %li
    A feature is <b>active</b> if it is enabled and there is either no activation strategy 
    or the strategy evaluates to true.
  %li
    A feature is <b>inactive</b> if it is either disabled or there is a strategy defined which
    evaluates to false.
    
