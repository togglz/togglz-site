---
layout: base
---

%h1
  State Repositories

%p
  State repositories are data stores which are responsible for persisting the state of a feature. 

%p
  The persisted state consists of:

%ul
  %li
    Is the feature enabled or disabled?
  %li
    An optional activation strategy.
  %li
    An optional list of configuration parameters for the selected strategy.

%p
  Users are able to choose the repository they want in their <code>TogglzConfig</code> implementation. 
  Please see the <a href="/documentation/installation.html">Installation</a> chapter for details.

%p
  This section will describe the repository implementations that are available in Togglz.

%h2
  InMemoryStateRepository

%p
  This repository stores the feature state entirely in memory. As the repository isn't able to persist the feature state across JVM restarts it isn't typically used in production. Instead it may be useful during development time and in integration tests.

%h2
  FileBasedStateRepository

%p
  The <code>FileBasedStateRepository</code> stores the state of features in a regular Java properties file. 
  This repository is very easy to set up. The file based approach has some advantages compared to the other 
  repository implementations. The most important advantage is that you are able to manually modify the 
  properties file if you have direct access to the server running the application. This way you can 
  very easily toggle features without the need to enable the embedded Togglz admin console.

%p
  The property files used by this repository have a very simple format:

%pre(class="prettyprint")
  :escaped
    # The feature 'FEATURE_ONE' is disabled
    FEATURE_ONE=false
    
    # The feature 'FEATURE_TWO' is enabled for the users 'chkal' and 'joe'
    FEATURE_TWO=true
    FEATURE_TWO.strategy = username
    FEATURE_TWO.param.users = chkal, john

%p
  The following example shows a <code>TogglzConfig</code> that uses this repository:

%pre(class="prettyprint lang-java")
  :escaped
    public class FileBasedTogglzConfiguration implements TogglzConfig {
    
        /* ..... */ 
    
        @Override
        public StateRepository getStateRepository() {
            return new FileBasedStateRepository(new File("/tmp/features.properties"));
        }
    
    }

%h2
  JDBCStateRepository

%p
  This repository is able to store the feature state in regular SQL database. The implementation uses the standard Java JDBC API and just requires you to specify a <code>DataSource</code>.

%p
  It is very simple to setup this repository in a regular JEE environment. The following example 
  shows how you can use the <code>@Resource</code> annotation to inject a JDBC datasource bound 
  to JNDI into your CDI-managed configuration class.

%pre(class="prettyprint lang-java")
  :escaped
    @ApplicationScoped
    public class DatabaseTogglzConfiguration implements TogglzConfig {
    
        @Resource(mappedName = "jboss/datasources/ExampleDS")
        private DataSource dataSource;
    
        /* ..... */ 
    
        @Override
        public StateRepository getStateRepository() {
            return new JDBCStateRepository(dataSource);
        }
    
    }

%p
  Please note that you won't have to manually create any database tables for the repository to work 
  correctly. <code>JDBCStateRepository</code> will automatically create the required table on the 
  first connection to the database. 

%h2
  MongoStateRepository

%p
  This repository stores feature state in a MongoDB database.

%p
  At a minimum, you must provide a MongoClient instance and the name of the database. You can optionally override the name
  of the collection used to store feature state (defaults to 'togglz') and the default WriteConcern (ACKNOWLEDGED).

%pre(class="prettyprint lang-java")
  :escaped
    StateRepository stateRepository = MongoStateRepository.newBuilder(mongoClient, "myDatabase")
            .collection('myFeatureState')
            .writeConcern(WriteConcern.REPLICA_ACKNOWLEDGED)
            .build();

%a(name='CachingStateRepository')
%h2
  CachingStateRepository <span class="label label-important">since 1.1.0</span>

%p
  This repository can be used to add caching behavior to an existing repository. It wraps the underlying
  repository and caches state lookups for a predefined time.  

%pre(class="prettyprint lang-java")
  :escaped
    public class CachingTogglzConfiguration implements TogglzConfig {
    
        /* ..... */ 
    
        @Override
        public StateRepository getStateRepository() {
            StateRepository someOtherRepository = ...;
            return new CachingStateRepository(someOtherRepository, 10000);
        }
    
    }

%p
  This example shows how to use <code>CachingStateRepository</code> to act as a cache for another
  repository. In this configuration it will cache results for 10 seconds. If you omit the timeout,
  lookups will be cached until <code>setFeatureState()</code> is called for the specific feature. 
  Using the cache without a timeout only makes sense if the repository state is never modified directly 
  (by modifying the database table for example).
  
