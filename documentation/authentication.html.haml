---
layout: base
---

%h1
  User Authentication

%p
  In some situations Togglz requires knowledge about the current user that is acting in the application. 
  The two most important reasons for this are:

%ul
  %li
    Features can be enabled only for specific users using the <i>Username strategy</i>.
  %li
    Togglz needs to know which users should be allowed to use the Togglz Admin Console.

%p
  The strategy to obtain the current user is represented by the <code>UserProvider</code> interface. You can choose 
  which strategy is used by implementing <code>TogglzConfig.getUserProvider()</code> like 
  described in <a href="/documentation/configuration.html">Configuration</a>.

%p
  Togglz ships with a number of default implementations for integrating with different user management scenarios. 
  
%ul
  %li
    %a(href='#servlet')
      Servlet Security API
  %li
    %a(href='#seamsecurity')
      Seam 3 Security
  %li
    %a(href='#deltaspike')
      Apache DeltaSpike Identity API
  %li
    %a(href='#springsecurity')
      Spring Security
  %li
    %a(href='#threadlocal')
      Thread Local Storage
  %li
    %a(href='#custom')
      Custom Implementation

%p
  The following section will describe each of them in detail.

%a(name='servlet')
%h2
  ServletUserProvider

%p
  This class is especially useful if your application is integrated with the authentication facilities of your container. It uses <code>HttpServletRequest.getUserPrincipal()</code> for obtaining the name of the current user and <code>HttpServletRequest.isUserInRole()</code> to check if the user is allowed to configure feature state using the admin console. You can optionally choose which role a user must have by specifying the group name in the constructor. 

%p
  The the following implementation of <code>TogglzConfig</code> for an example:

%pre(class="prettyprint lang-java")
  :escaped
    public class MyTogglzConfiguration implements TogglzConfig {
    
        /* ..... */ 
    
        @Override
        public UserProvider getUserProvider() {
            return new ServletUserProvider("ADMIN_ROLE");
        }
    }

%a(name='seamsecurity')
%h2
  SeamSecurityUserProvider

%p
  This provider implementation offers a very simple way to integrate Togglz with Seam Security. This provider can be used after adding the following dependency to your project:

%pre(class="prettyprint lang-xml")
  :escaped
    <dependency>
      <groupId>org.togglz</groupId>
      <artifactId>togglz-seam-security</artifactId>
      <version>#{site.stableVersion}</version>
    </dependency>

%p
  To use this provider, register it in your <code>TogglzConfig</code> like this:

%pre(class="prettyprint lang-java")
  :escaped
    public class MyTogglzConfiguration implements TogglzConfig {
    
        /* ..... */ 
    
        @Override
        public UserProvider getUserProvider() {
            return new SeamSecurityUserProvider();
        }
    }

%p
  Now implement an authorizer method for <code>@FeatureAdmin</code> like this:

%pre(class="prettyprint lang-java")
  :escaped
    public class SeamSecurityAuthorizer {
    
        @Secures
        @FeatureAdmin
        public boolean isFeatureAdmin(Identity identity) {
            // return true if the current user is allowed to toggle features
        }
        
    }

%a(name='deltaspike')
%h2
  DeltaSpikeUserProvider

%p
  This provider offers integration with the Apache DeltaSpike Identity API. To use this provider, add the following dependency
  to your project:

%pre(class="prettyprint lang-xml")
  :escaped
    <dependency>
      <groupId>org.togglz</groupId>
      <artifactId>togglz-deltaspike</artifactId>
      <version>#{site.stableVersion}</version>
    </dependency>

%p
  Then change your <code>TogglzConfig</code> implementation to use the provider:

%pre(class="prettyprint lang-java")
  :escaped
    public class MyTogglzConfiguration implements TogglzConfig {
    
        /* ..... */ 
    
        @Override
        public UserProvider getUserProvider() {
            return new DeltaSpikeUserProvider();
        }
    }

%p
  Please note that the provider currently doesn't support to set the <i>feature admin</i> flag for a user. This is because the DeltaSpike
  API for authorization isn't stable yet. So if you want to set the flag using some custom criterion, you can extend 
  <code>DeltaSpikeUserProvider</code> and overwrite the <code>isFeatureAdmin(Identity)</code> method.

%a(name='springsecurity')
%h2
  SpringSecurityUserProvider

%p
  This implementation provides a way to integrate Togglz with Spring Security. To use this provider you have to add the following dependency to your project.

%pre(class="prettyprint lang-xml")
  :escaped
    <dependency>
      <groupId>org.togglz</groupId>
      <artifactId>togglz-spring-security</artifactId>
      <version>#{site.stableVersion}</version>
    </dependency>

%p
  To configure Togglz to use this provider, add it to your <code>TogglzConfig</code>. Please note that you have to specify an authority name in the constructor of the class. Users with this authority will automatically be able to perform Togglz administration tasks.

%pre(class="prettyprint lang-java")
  :escaped
    public class MyTogglzConfiguration implements TogglzConfig {
    
        /* ..... */ 
    
        @Override
        public UserProvider getUserProvider() {
            return new SpringSecurityUserProvider("ADMIN_AUTHORITY");
        }
    }

%a(name='threadlocal')
%h2
  ThreadLocalUserProvider

%p
  Many applications are using servlet filters to implement authentication. In these scenarios authentication is typically done for a single request received by the application. If you are using such a pattern for user authentication you can use <code>ThreadLocalUserProvider</code> to tell Togglz about the current user.

%p
  This implementation allows to store the current user in a ThreadLocal object for the current request. The only thing you have to do is to set the current user from your filter like this:

%pre(class="prettyprint lang-java")
  :escaped
    @Override
    public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) 
            throws IOException, ServletException {
    
        String username = ...;
        boolean isAdmin = ...;
    
        FeatureUser user = new SimpleFeatureUser(username, isAdmin);
    
        ThreadLocalUserProvider.bind(user);
        try {
            chain.doFilter(request, response);
        } finally {
            ThreadLocalUserProvider.release();
        }
    
    }

%p
  Then register the <code>ThreadLocalUserProvider</code> in your <code>TogglzConfig</code> like this:

%pre(class="prettyprint lang-java")
  :escaped
    public class MyTogglzConfiguration implements TogglzConfig {
    
        /* ..... */ 
    
        @Override
        public UserProvider getUserProvider() {
            return new ThreadLocalUserProvider();
        }
    }

%a(name='custom')
%h2
  Custom Implementation

%p
  If none of the default implementations fits you needs, you can always think about implementing a provider yourself. This is very easy.
  You just have to implement a single method called <code>getCurrentUser()</code>.
  
%p
  The following example shows an implementation which reads the username from a servlet request attribute: 
   
%pre(class="prettyprint lang-java")
  :escaped
    public class MyTogglzConfiguration implements TogglzConfig {
    
        /* ..... */ 
    
        @Override
        public UserProvider getUserProvider() {
            return new UserProvider() {
                
                @Override
                public FeatureUser getCurrentUser() {
                
                    HttpServletRequest request = HttpServletRequestHolder.get();
                    
                    String username = (String) request.getAttribute("username");
                    boolean isAdmin = "admin".equals(username);
                    
                    return new SimpleFeatureUser(username, isAdmin);
                    
                }
            };
        }
    }

%p
  Please note the <code>HttpServletRequestHolder</code> class which may be very useful if you are implementing a <code>UserProvider</code>
  yourself because it allows to obtain the <code>HttpServletRequest</code> from anywhere in your application.  
